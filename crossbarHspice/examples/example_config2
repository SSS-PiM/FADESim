// this example generates corresponding spice code for the simulation you set.
// we define many commands to allow users to set up the simulation easily 
// and generate the spice code rather than write the spice code one line by one line.

topString .title twoDArray

// don't use verilog-a module for the cell.
// topString .hdl 'reram_mod.va' reram_mod
// use resistance directly for bulding spice code
useRtypeReRAMCell yes

// each cell has two states, 0 -> 1e6 Omega, 1-> 1e3->Omega
cellRstates 2 1e6 1e3

// dc mode in spice
dc
bottomString .end

arraySize 2 2
selector no

// wire resistance between nodes
line_resistance 2.93

// set all cell to 1, setCellR x y state, see reram_mod.va for state's meanings. 
// -1 match all
setCellR -1 -1 1

// set cell (0, -1) to 0, -1 match all columns
setCellR 0 -1 0

// print bitline output current 
// senseBitlineI down x, x means the x-th column, -1 match all
senseBitlineI down -1

// set wordline (left) are used
setUseLine left -1 
// set bitline (down) are used
setUseLine down -1

// set left wordline are all connected to voltage 1.
setLineV left -1 1
// set downside bitline are all connected to voltage zero.
setLineV down -1 0

// spice code generated to spice.out
build spice2.out

// use our fast simulation method Gauss-Seidel.
// nodebasedGSMethod iter_time omega 0  enable_break  break_thres
// a better omega results in less simulation time.
// use tests/print_best_omega.py to get best omega frist.
// see our paper why omega is important.
// see code in 2darray.cc for details setting
nodebasedGSMethod 1000 1.2 0 yes 1e-8

// our custom iterative method.
// fastsolve iter_time 0 enable_break(0|1) break_thres
// see code in 2darray.cc for details setting
fastsolve 1000 0 1 1e-8 


// other compared fast simulation method
// see code in 2darray.cc for details setting
// e.g., IR_FCM, ir_neurosim





 




